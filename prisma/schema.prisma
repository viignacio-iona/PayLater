// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String   // Simple name for the trip
  avatar      String?
  qrCode      String?  // QR code image URL for payments
  totalOwed   Decimal  @default(0) // Total amount this user owes
  totalOwing  Decimal  @default(0) // Total amount others owe this user
  deletedAt   DateTime? // Soft delete timestamp
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  trips       TripMember[]
  expenses    Expense[]
  createdTrips Trip[] @relation("TripCreator")
  expenseSplits ExpenseSplit[]

  @@map("users")
}

model Trip {
  id          String   @id @default(cuid())
  name        String
  description String?
  currency    String   @default("PHP")
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  // Relations
  creator     User     @relation("TripCreator", fields: [createdBy], references: [id])
  members     TripMember[]
  expenses    Expense[]

  @@map("trips")
}

model TripMember {
  id        String   @id @default(cuid())
  tripId    String
  userId    String
  role      TripRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // Relations
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
  @@map("trip_members")
}

model Expense {
  id          String   @id @default(cuid())
  tripId      String
  title       String
  description String?
  amount      Decimal
  currency    String   @default("PHP")
  date        DateTime @default(now())
  paidBy     String
  splitType   SplitType @default(EQUAL)
  isSettled  Boolean  @default(false)
  receiptUrl  String?
  ocrData     Json?   // Store OCR results
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  trip       Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  payer      User     @relation(fields: [paidBy], references: [id])
  splits     ExpenseSplit[]

  @@map("expenses")
}

model ExpenseSplit {
  id        String   @id @default(cuid())
  expenseId String
  userId    String
  amount    Decimal  // Amount this user owes for this expense
  createdAt DateTime @default(now())

  // Relations
  expense   Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
  @@map("expense_splits")
}



enum TripRole {
  CREATOR
  ADMIN
  MEMBER
}

enum SplitType {
  EQUAL
  PERCENTAGE
  EXACT
  SHARES
  TEMPLATE
}


